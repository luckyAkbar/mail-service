// Code generated by MockGen. DO NOT EDIT.
// Source: mail-service/internal/model (interfaces: MailUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "mail-service/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMailUsecase is a mock of MailUsecase interface.
type MockMailUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockMailUsecaseMockRecorder
}

// MockMailUsecaseMockRecorder is the mock recorder for MockMailUsecase.
type MockMailUsecaseMockRecorder struct {
	mock *MockMailUsecase
}

// NewMockMailUsecase creates a new mock instance.
func NewMockMailUsecase(ctrl *gomock.Controller) *MockMailUsecase {
	mock := &MockMailUsecase{ctrl: ctrl}
	mock.recorder = &MockMailUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailUsecase) EXPECT() *MockMailUsecaseMockRecorder {
	return m.recorder
}

// RegisterFreeMailingList mocks base method.
func (m *MockMailUsecase) RegisterFreeMailingList(arg0 context.Context, arg1 *model.RegisterFreeMailInput) (*model.MailingList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterFreeMailingList", arg0, arg1)
	ret0, _ := ret[0].(*model.MailingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterFreeMailingList indicates an expected call of RegisterFreeMailingList.
func (mr *MockMailUsecaseMockRecorder) RegisterFreeMailingList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterFreeMailingList", reflect.TypeOf((*MockMailUsecase)(nil).RegisterFreeMailingList), arg0, arg1)
}
